# Welcome to Timoros Toolkit
# version: 0.7
# date: 16/7/2022


#------------Variable declaration---------------

var weather = Connect("MeteorologyServer")
var doors = Connect("SteeringComputer")
var locator = Connect("MissingPersonFinder")
var playstation = Connect("LongsonPlaystation")
var extractor = Connect("Extractor")
var teleporter = Connect("Teleporter")
var hugin = Connect("Hugin")
var database = Connect("TestComputer2")
var mainframe = Connect("MainFrame")
var balance = Connect("FinanceComputer")
var heart = Connect("Heart")
array Rooms = LoadRooms()
array roomNames = []

#-----------------------------------------------

#----------Main Program--------------------

loop
    Rooms = LoadRooms()

    ClearText()
    Print("######################Timoros Toolkit 0.3#####################")
    Print(" ")
    Print("- [U]nlock/Lock door")
    Print("- [L]ocate items")
    Print("- [W]eather changer")
    Print("- [T]eleport player")
    Print("- [S]ave room")
    Print("- [E]dit room list")
    Print("- [C]lear database")
    Print("- [M]oney hack")
    Print("- [P]layer stats")
    Print("- [Q]uit program")
    Print(" ")
    string selection = Input("> ")

    if selection == "U" or selection == "u"
        unlock()
    else if selection == "L" or selection == "l" # Locate command
        ClearText()
        Print("######Item Locator######")
        Print(" ")
        Print("Type the name of the item you want to locate:")
        string thing = Input("> ")
        Locate(thing)
    else if selection == "W" or selection == "w" # Weather command
        ClearText()
        Print("######Weather Changer######")
        Print(" ")
        Print("- [1] Sunny")
        Print("- [2] Drizzle")
        Print("- [3] Rain")
        Print("- [4] Storm")
        var rain = Input("> ")
        Weather(rain)
    else if selection == "T" or selection == "t" # Teleport command
        TimorosTeleport()
    else if selection == "S" or selection == "s" # Save room command
        ClearText()
        Print("######Room Saver######")
        Print("Do you want to add the [C]urrent room or [M]anually input it?")
        var option = Input("> ")
        if option == "C" or option == "c"
            array room = GetCurrentRoom()
            AddRoom(room)
        else if option == "M" or option == "m"
            ClearText()
            Print("Please enter the name of the room you would like to add")
            string manualName = Input("> ")
            if !VerifyThingExists(manualName, "room")
                Print("That room does not exist")
                Sleep(3)
            else
                AddManualRoom(manualName)
            end
        end
    else if selection == "E" or selection == "e"
        if Count(Rooms) == 0
            Print("No rooms in database")
            Sleep(3)
        else
            string realName = ShowList("edit")
            if realName != ""
                ClearText()
                Print("Would you like to [D]elete or [C]hange the name?")
                selection = Input("> ")
                if selection == "D" or selection == "d"
                    ClearText()
                    DeleteRoom(realName)
                else if selection == "C" or selection == "c"
                    ClearText()
                    RenameRoom(realName)
                else
                    Print("Invalid Selection")
                    Sleep(3)
                end
            end
        end
    else if selection == "C" or selection == "c" # Database reset command
        databaseReset()
    else if selection == "M" or selection == "m" # Money hack command
        moneycheat()
    else if selection == "P" or selection == "p" # Player stats command
        playerstats()
    else if selection == "Q" or selection == "q" # Quit command
        Finish()
    else
        Print("Invalid Selection!")
        Sleep(3)
    end
end


#-------------------------------------------


#--------------Main Functions---------------

# Door Unlocker
void Unlock(string doorName)
    Print("Unlocking...")
    Sleep(2)
    var position = playstation.GetPosition(doorName)
    if position == "Thing not found"
        Print(doorName + " Was not found!")
        Sleep(3)
    else
        doors.Unlock(doorName)
        Print(doorName + " Unlocked!")
        Sleep(3)
    end
end

# Door Locker
void Lock(string doorName)
    Print("Locking...")
    Sleep(2)
    var position = playstation.GetPosition(doorName)
    if position == "Thing not found"
        Print(doorName + " Was not found!")
        Sleep(3)
    else
        doors.Lock(doorName)
        Print(doorName + " Locked!")
        Sleep(3)
    end
end

# Item Locator
void Locate(string thing)
    Print("Locating...")
    Sleep(2)
    if thing == ""
        
    else
        var position = playstation.GetPosition(thing)
        extractor.CopyToClipboard(position)
        if position == "Thing not found"
            Print(position)
            Sleep(3)
        else
            Print(position)
            Print("Location copied to clipboard!")
            Sleep(3)
        end
    end
end

# Weather Changer
void Weather(rain)
    if rain == 1
        Print("Changing weather...")
        Sleep(2)
        weather.SetRain(0)
        Print("Weather set to Sunny")
        Sleep(3)
    else if rain == 2
        Print("Changing weather...")
        Sleep(2)
        weather.SetRain(25)
        Print("Weather set to Drizzle")
        Sleep(3)
    else if rain == 3
        Print("Changing weather...")
        Sleep(2)
        weather.SetRain(100)
        Print("Weather set to Rain")
        Sleep(3)
    else if rain == 4
        Print("Changing weather...")
        Sleep(2)
        weather.SetRain(200)
        Print("Weather set to Storm")
        Sleep(3)
    else
        Print("Invalid Selection")
        Sleep(3)
        return
    end
end

# Player Teleporter
void TimorosTeleport()
    ClearText()
    Print("######Teleporter######")
    Print(" ")
    Print("- [R]oom list")
    Print("- [M]anual input")
    var optionTP = Input("> ")
    if optionTP == "R" or optionTP == "r"
        if Count(Rooms) == 0
            Print("No rooms in database")
            Sleep(3)
        else
            string realName = ShowList("teleport")
            RoomTeleport(realName, "")
        end
    else if optionTP == "M" or optionTP == "m"
        ClearText()
        Print("Name of the item/room you want to teleport to:")
        var name = Input("> ")
        var position = playstation.GetPosition(name)
        if position == "Thing not found"
            Print(name + " does not exist")
            Sleep(3)
        else
            array item = ParseGetPosition(mainframe.GetPosition(name))
            RoomTeleport(item[0], name)
        end
    end
end

# Saved Room Teleporter
void RoomTeleport(string realName, string item)
    if realName == ""
        return
    end

    string moverName = "Factory_ServerRoom_LargeRecorder_LargeRecorder_1"
    var Mover = Connect(moverName)

    array currentRoom = GetCurrentRoom()

    array items = playstation.GetThingsInRoom(currentRoom[0])
    playstation.SetPosition(moverName, items[0])

    if item == ""
        item = GetClosestItem(realName)
    end
    Mover.MovePerson("Sebastian", item)

    items = playstation.GetThingsInRoom("Testing")
    playstation.SetPosition(moverName, items[0])

    Finish()
end

# Add a room to the database
void AddRoom(array room)
    ClearText()
    string realName = room[0]

    if HasIndex(Rooms, realName)
        Print("This room is already in the database")
        Sleep(3)
        return
    end

    Print("Please enter a name for " + realName)
    string prettyName = Input("> ")

    room[1] = prettyName

    SaveRoom(room)
    Print(prettyName + " was saved!")
    Sleep(3)
end

# Add a manually-entered room to the list of rooms
void AddManualRoom(string manualName)
    array items = playstation.GetThingsInRoom(manualName)

    array room = ParseGetPosition(playstation.GetPosition(items[0]))

    AddRoom(room)
end

# Save the given room to the database
void SaveRoom(array room)
    string realName = room[0]
    string prettyName = room[1]

    database.SaveMemory(realName, prettyName)
    database.SaveMemory(IntToChar(64) + realName, room[2])
    database.SaveMemory(IntToChar(65) + realName, room[3])
end

# Change the prettyName of a room in the database
void RenameRoom(string realName)
    Print("Please enter a new name for " + realName)
    var prettyName = Input("> ")

    database.EraseMemory(realName)

    database.SaveMemory(realName, prettyName)
end

# Delete a room from the database
void DeleteRoom(string realName)
    array room = Rooms[realName]
    Print("Are you sure you want to delete '" + room[1] + "' from the database? [y/n]")
    string answer = Input("> ")
    if answer == "y" or answer == "Y"
        database.EraseMemory(realName)
        database.EraseMemory(IntToChar(64) + realName)
        database.EraseMemory(IntToChar(65) + realName)
        Print("Deletion was successfull!")
        Sleep(3)
    end
end

# Clean up
void Finish()
    ClearText()
    var items = playstation.GetThingsInRoom("Sebastian_inventory")
    playstation.SetPosition("TestComputer1", items[0])
    Quit()
end

# Database reset
void databaseReset()
    ClearText()
    Print("######Database Destroyer######")
    Print(" ")
    Print("Are you sure you want to clear the Database?[y/n]")
    var option2 = Input("> ")
    if option2 == "Y" or option2 == "y"
        Print("Clearing Database...")
        Sleep(3)
        database.ClearMemories()    
        Print("Database Cleared...")
        Sleep(3)
    else if option2 == "N" or option2 == "n"
            return
    else
        Print("Invalid Selection")
        Sleep(3)
        return
    end
end

# Gets a string between the first instance of start and end (exclusive)
string GetSubString(string input, string start, string finish)
    bool iteratingResult = false
    string result = ""

    loop char in input
        if iteratingResult
            if char == finish
                return result
            end

            result += char
        end

        if char == start
            iteratingResult = true
        end
    end
end

# Converts a string to an int
number StringToInt(string input)
    bool negative = false
    number result = 0
    number current = 0

    # This keeplaystation track of what multiple of 10 we're at
    number multiple = Count(input) - 1

    loop i in input
        if i == "-"
            negative = true
            multiple -= 1
        else
            current = CharToInt(i) + 49
            if multiple != 0
                current *= Power(10, multiple)
            end
            result += current
            multiple -= 1
        end
    end

    if negative
        result *= -1
    end

    return result
end

# Raise a number to a power
# Taken from httplaystation://en.wikipedia.org/wiki/Exponentiation_by_squaring#Basic_method
number Power(number x, number n)
    if n < 0
        return Power(1 / x, n * -1)
    else if n == 0
        return 1
    else if n == 1
        return x
    else if Mod(n, 2) == 0
        return Power(x * x, n / 2)
    else
        return x * Power(x * x, (n - 1) / 2)
    end
end

# Setup teleporter to jump to the given room
void Teleport(string realName, string item)
    if realName == ""
        return
    end

    string moverName = "Factory_ServerRoom_LargeRecorder_LargeRecorder_1"
    var Mover = Connect(moverName)

    array currentRoom = GetCurrentRoom()

    array items = playstation.GetThingsInRoom(currentRoom[0])
    playstation.SetPosition(moverName, items[0])

    if item == ""
        item = GetClosestItem(realName)
    end
    Mover.MovePerson("Sebastian", item)

    items = playstation.GetThingsInRoom("Testing")
    playstation.SetPosition(moverName, items[0])

    Finish()
end

# Get the item closest to the spawn coords
string GetClosestItem(string realName)
    array room = Rooms[realName]
    Print("Telepoting to " + room[1] + " (Please wait!)")
    number closestDistance = 9999
    string closestItem = ""

    array items = playstation.GetThingsInRoom(realName)
    number itemNum = Count(items)
    Print("Items Found: " + itemNum)
    number itemPercentage = 0
    number i = 0
    number currentNum = 0
    
    loop item in items
        i += 1
        currentNum += 1
        array itemArray = ParseGetPosition(playstation.GetPosition(item))
        percent(itemPercentage,currentNum,itemNum)
        number xDifference = AbsoluteValue(room[2] - itemArray[2])
        number yDifference = AbsoluteValue(room[3] - itemArray[3])
        Print(" (" + item + ")")
        number totalDistance = xDifference + yDifference

        if totalDistance < closestDistance
            closestDistance = totalDistance
            closestItem = item
        end
        if i > 60
            Print(".")
            i = 0
        end
    end
    Print(" ")
    Print("Closest item found!")
    Sleep(3)
    
    return closestItem
end

number AbsoluteValue(number input)
    if input < 0
        return input * -1
    end

    return input
end

void percent(number percentage, number current, number actualNum)
    ClearText()
    percentage = current / actualNum
    PrintS("Checking items: " + Round(percentage * 100) + "%")
end

# Check if a manually entered thing is real
bool VerifyThingExists(string thing, string type)
    array things = []
	
	if type == "room"
		things = playstation.GetAllRooms()
	else
		things = playstation.GetPeople()
	end

    loop item in things
        if thing == item
            return true
        end
    end

    return false
end

# Show the list of rooms
string ShowList(string type)
    ClearText()
    Print("######Room Editor######")
    roomNames = []
    string prompt = ""
    if type == "edit"
        prompt = "Please select a room to edit"
    else
        prompt = "Please select a room to teleport to"
    end
    var height = (Height() / 8) - 4
    var total = Count(Rooms)
    string result = ""

    Print(prompt)

    number i = 0

    loop room in Rooms
        Append(roomNames, room[0])
        Print("[" + (i + 1) + "] " + room[1])
        i++
    end

    Sleep(0.1)
    number key = Input("> ")

    if key > 0 and key <= total
        string roomName = roomNames[key - 1]
        array room = Rooms[roomName]
        return room[0]
    else
        Print("Invalid Selection")
        Sleep(3)
        return ""
    end
end

void moneycheat()
    ClearText()
    Print("######Bank Exploit Tool######")
    Print(" ")
    Print("Money you want to add to your account")
    var amount = Input("> ")
    if amount > "-10000000" and amount < "10000000"
        balance.ChangeBalance("Sebastian", amount)
        ClearText()
        Print("Balanced updated successfully!")
        Print("Your new balance is: " + balance.GetBalanceForPerson("Sebastian"))
        Sleep(3)
    else
        Print("Invalid Amount")
        Sleep(3)
    end
end

void playerstats()
    ClearText()
    var sleepiness = heart.GetNumericData("Sebastian", "sleepiness")
    var smelliness = heart.GetNumericData("Sebastian", "smelliness")
    var charisma = heart.GetNumericData("Sebastian", "charisma")
    var drunkenness = heart.GetNumericData("Sebastian", "drunkenness")
    var corruption = heart.GetNumericData("Sebastian", "corruption")
    Print("######Player Stats###### - Select a stat to change it!")
    Print(" ")
    Print("- [1] Sleepiness - Current Value: " + Round(sleepiness))
    Print("- [2] Smelliness - Current Value: " + Round(smelliness))
    Print("- [3] Charisma - Current Value: " + Round(charisma))
    Print("- [4] Drunkenness - Current Value: " + Round(drunkenness))
    Print("- [5] Corruption - Current Value: " + Round(corruption))
    Print("- [R]efill All")
    var option = Input("> ")
    if option == "1"
        ClearText()
        Print("Do you want to rest fully?[y/n]")
        var option2 = Input("> ")
        if option2 == "Y" or option2 == "y"
            heart.SetNumericData("Sebastian", "sleepiness", 0)
            Print("You are now fully rested!")
            Sleep(3)
        else if option2 == "N" or option2 == "n"
            return
        else
            Print("Invalid Selection")
            Sleep(3)
            return
        end
    else if option == "2"
        ClearText()
        Print("Do you want to get rid of the smell?[y/n]")
        var option2 = Input("> ")
        if option2 == "Y" or option2 == "y"
            heart.SetNumericData("Sebastian", "smelliness", 0)
            Print("You no longer smell bad!")
            Sleep(3)
        else if option2 == "N" or option2 == "n"
            return
        else
            Print("Invalid Selection")
            Sleep(3)
            return
        end
    else if option == "3"
        ClearText()
        Print("Do you want to become fully charismatic?[y/n]")
        var option2 = Input("> ")
        if option2 == "Y" or option2 == "y"
            heart.SetNumericData("Sebastian", "charisma", 1000)
            Print("Look at that charisma")
            Sleep(3)
        else if option2 == "N" or option2 == "n"
            return
        else
            Print("Invalid Selection")
            Sleep(3)
            return
        end
    else if option == "4"
        ClearText()
        Print("Do you want to get rid of drunkenness?[y/n]")
        var option2 = Input("> ")
        if option2 == "Y" or option2 == "y"
            heart.SetNumericData("Sebastian", "drunkenness", 0)
            Print("You are back at your feet")
            Sleep(3)
        else if option2 == "N" or option2 == "n"
            return
        else
            Print("Invalid Selection")
            Sleep(3)
            return
        end
    else if option == "5"
        ClearText()
        Print("Do you want to restore corruption?[y/n]")
        var option2 = Input("> ")
        if option2 == "Y" or option2 == "y"
            heart.SetNumericData("Sebastian", "corruption", 0)
            Print("You are no longer corrupted")
            Sleep(3)
        else if option2 == "N" or option2 == "n"
            return
        else
            Print("Invalid Selection")
            Sleep(3)
            return
        end
    else if option == "R" or option == "r"
        ClearText()
        Print("Are you sure you want to refill all stats?[y/n]")
        var option2 = Input("> ")
        if option2 == "Y" or option2 == "y"
            heart.SetNumericData("Sebastian", "sleepiness", 0)
            heart.SetNumericData("Sebastian", "smelliness", 0)
            heart.SetNumericData("Sebastian", "charisma", 1000)
            heart.SetNumericData("Sebastian", "drunkenness", 0)
            heart.SetNumericData("Sebastian", "corruption", 0)
            Print("All stats have been refilled")
            Sleep(3)
        else if option2 == "N" or option2 == "n"
            return
        else
            Print("Invalid Selection")
            Sleep(3)
            return
        end
    else
        Print("Invalid Selection")
        Sleep(3)
        return
    end
end

void unlock()
    ClearText()
    Print("######Room Unlocker######")
    Print(" ")
    Print("Do you want to [U]nlock or [L]ock a door?")
    string select = Input("> ")
    if select == "U" or select == "u" # Unlock command
        ClearText()
        Print("Door Name:")
        string doorName = Input("> ")
        Unlock(doorName)
    else if select == "L" or select == "l" # Lock command
        ClearText()
        Print("Door Name:")
        string doorName = Input("> ")
        Lock(doorName)
    else
        Print("Invalid Selection!")
        Sleep(3)
        return
    end
end
# -------------------------------------------------

# ---------------------Arrays----------------------
array ParseGetPosition(string input)
    array room = []

    room[0] = GetSubString(input, " ", ",")

    # This is where the prettyName will go
    room[1] = ""

    array coords = ParseCoords(GetSubString(input, "(", ")"))

    room[2] = coords[0]
    room[3] = coords[1]

    return room
end

array ParseCoords(string input)
    array coords = SplitString(input, ",")

    coords[0] = StringToInt(coords[0])
    coords[1] = StringToInt(coords[1])

    return coords
end

array SplitString(string input, string separator)
    array result = []
    number index = 0
    result[0] = ""

    loop char in input
        if char == separator
            index += 1
            result[index] = ""
        end

        if char != separator
            # For some reason "result[index] += char" didn't work
            string temp = result[index]
            temp += char
            result[index] = temp
        end
    end

    return result
end

array GetCurrentRoom()
     string room = playstation.GetPosition("Sebastian")
     return ParseGetPosition(room)
end

array LoadRooms()
    array allKeys = database.GetMemories()
    array realNames = []
    array rooms = []
    
    loop key in allKeys
        if key[0] != IntToChar(64) and key[0] != IntToChar(65)
            Append(realNames, key)
        end
    end
    
    loop realName in realNames
        string x = IntToChar(64) + realName
        string y = IntToChar(65) + realName
        rooms[realName] = [realName, database.LoadMemory(realName), database.LoadMemory(x), database.LoadMemory(y)]
    end

    return rooms
end
# -------------------------------------------------